import { default as ChartLegend } from "../chart/legend/legend";
import { SankeyElement } from "./element";
import { setDefaultOptions } from '../common';
import { BOTTOM, CENTER, POINTER } from "../common/constants";
import { AREA } from "../chart/constants";

const sortData = (a, b) => {
    if (a.node.x0 - b.node.x0 !== 0) {
        return a.node.x0 - b.node.x0;
    }
    return a.node.y0 - b.node.y0;
};

export class Legend extends SankeyElement {
    getElement() {
        const options = this.options;
        const { drawingRect, nodes = [], item } = options;

        if (options.visible === false || !nodes.length) {
            return null;
        }

        const data = nodes.map((node) => ({
            text: (node.label && node.label.text) || '',
            area: {
                background: item.areaBackground !== undefined ? item.areaBackground : node.color,
                opacity: item.areaOpacity !== undefined ? item.areaOpacity : node.opacity
            },
            node: node,
        }));

        data.sort(sortData);

        const legend = new ChartLegend(Object.assign({}, options, {data}));
        legend.reflow(drawingRect);

        legend.renderVisual();
        return legend.visual;
    }

    createElement() {
        return this.getElement();
    }
}

setDefaultOptions(Legend, {
    markers: { visible: false },
    item: {
        type: AREA,
        cursor: POINTER,
        opacity: 1
    },
    position: BOTTOM,
    align: CENTER,
    border: {
        width: 0
    }
});
