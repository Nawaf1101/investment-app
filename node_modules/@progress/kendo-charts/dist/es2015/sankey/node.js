import { geometry, drawing } from '@progress/kendo-drawing';
import { SankeyElement } from './element';
import { deepExtend } from '../common';

export class Node extends SankeyElement {
    getElement() {
        const options = this.options;
        const node = options.node;
        const rect = new geometry.Rect([node.x0, node.y0], [node.x1 - node.x0, node.y1 - node.y0]);

        return drawing.Path.fromRect(rect, this.visualOptions());
    }

    visualOptions() {
        const options = deepExtend({}, this.options, this.options.node);

        return {
            fill: {
                color: options.color,
                opacity: options.opacity
            },
            stroke: { width: 0 },
            className: 'k-sankey-node',
            role: 'graphics-symbol',
            ariaRoleDescription: 'Node',
            ariaLabel: options.node.label.text
        };
    }
}

const nodeColor = (node, nodeColors, index) => node.color || nodeColors[index % nodeColors.length];

export const resolveNodeOptions = (node, options, nodeColors, index) => {
    const nodeOptions = deepExtend({}, options, options.node);
    return deepExtend({},
        { color: nodeColor(node, nodeColors, index) },
        nodeOptions,
        { node },
        {
            visual: node.visual,
            opacity: node.opacity,
            offset: node.offset,
            color: node.color
        }
    );
};
