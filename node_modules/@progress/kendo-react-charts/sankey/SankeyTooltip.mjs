/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as t from "react";
import { IconWrap as y } from "@progress/kendo-react-common";
import { arrowRightIcon as x } from "@progress/kendo-svg-icons";
import { useInternationalization as v, useLocalization as k } from "@progress/kendo-react-intl";
import { tooltipUnitFormat as f, messages as b } from "./messages.mjs";
const L = (e) => {
  const { Content: l, offset: o, event: { tooltipData: n, dataItem: g, nodeValue: E } } = e, m = t.useRef(null);
  return t.useEffect(() => {
    const i = m.current;
    if (!n || !i)
      return;
    const p = { width: i.offsetWidth, height: i.offsetHeight }, r = { ...n.popupOffset }, c = n.popupAlign;
    r.left += c.horizontal === "left" ? o : -1 * o, c.horizontal === "right" && (r.left -= p.width), c.vertical === "bottom" ? r.top -= p.height + o : r.top += o, i.style.left = `${r.left}px`, i.style.top = `${r.top}px`, i.style.visibility = "";
  }, [n]), /* @__PURE__ */ t.createElement(
    "div",
    {
      ref: m,
      style: { visibility: "hidden" },
      className: "k-tooltip k-sankey-tooltip k-chart-tooltip k-chart-shared-tooltip"
    },
    /* @__PURE__ */ t.createElement("div", { className: "k-tooltip-content" }, /* @__PURE__ */ t.createElement(l, { dataItem: g, nodeValue: E }))
  );
}, u = 3, I = `0 ${u}px`, d = { display: "flex", alignItems: "center" }, s = (e) => /* @__PURE__ */ t.createElement(
  "div",
  {
    style: {
      width: 15,
      height: 15,
      backgroundColor: e.color,
      display: "inline-flex",
      marginLeft: u
    }
  }
), a = (e) => /* @__PURE__ */ t.createElement("span", { style: { margin: I } }, e.children), h = (e) => v().format(k().toLanguageString(f, b[f]), [e || 0]), N = (e) => {
  const { color: l, label: o } = e.dataItem;
  return /* @__PURE__ */ t.createElement("div", { style: d, className: "k-tooltip-content" }, /* @__PURE__ */ t.createElement(s, { color: l }), /* @__PURE__ */ t.createElement(a, null, o.text), /* @__PURE__ */ t.createElement(a, null, h(e.nodeValue)));
}, R = (e) => {
  const { source: l, target: o, value: n } = e.dataItem;
  return /* @__PURE__ */ t.createElement("div", { style: d }, /* @__PURE__ */ t.createElement(s, { color: l.color }), /* @__PURE__ */ t.createElement(a, null, l.label.text), /* @__PURE__ */ t.createElement(y, { icon: x, name: "arrow-right" }), /* @__PURE__ */ t.createElement(s, { color: o.color }), /* @__PURE__ */ t.createElement(a, null, o.label.text), /* @__PURE__ */ t.createElement(a, null, h(n)));
};
export {
  R as LinkTooltipContent,
  N as NodeTooltipContent,
  L as TooltipComponent
};
